from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class PamTaskDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pam_task_id=None, expiry_time=None):  # noqa: E501
        """PamTaskDetail - a model defined in OpenAPI

        :param pam_task_id: The pam_task_id of this PamTaskDetail.  # noqa: E501
        :type pam_task_id: str
        :param expiry_time: The expiry_time of this PamTaskDetail.  # noqa: E501
        :type expiry_time: datetime
        """
        self.openapi_types = {
            'pam_task_id': str,
            'expiry_time': datetime
        }

        self.attribute_map = {
            'pam_task_id': 'pamTaskID',
            'expiry_time': 'expiryTime'
        }

        self._pam_task_id = pam_task_id
        self._expiry_time = expiry_time

    @classmethod
    def from_dict(cls, dikt) -> 'PamTaskDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PamTaskDetail of this PamTaskDetail.  # noqa: E501
        :rtype: PamTaskDetail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pam_task_id(self) -> str:
        """Gets the pam_task_id of this PamTaskDetail.

        The ID of the PAM task, following the format PAM1234567.  # noqa: E501

        :return: The pam_task_id of this PamTaskDetail.
        :rtype: str
        """
        return self._pam_task_id

    @pam_task_id.setter
    def pam_task_id(self, pam_task_id: str):
        """Sets the pam_task_id of this PamTaskDetail.

        The ID of the PAM task, following the format PAM1234567.  # noqa: E501

        :param pam_task_id: The pam_task_id of this PamTaskDetail.
        :type pam_task_id: str
        """
        if pam_task_id is None:
            raise ValueError("Invalid value for `pam_task_id`, must not be `None`")  # noqa: E501
        if pam_task_id is not None and not re.search(r'^PAM\d{7}$', pam_task_id):  # noqa: E501
            raise ValueError("Invalid value for `pam_task_id`, must be a follow pattern or equal to `/^PAM\d{7}$/`")  # noqa: E501

        self._pam_task_id = pam_task_id

    @property
    def expiry_time(self) -> datetime:
        """Gets the expiry_time of this PamTaskDetail.

        The time at which the PAM task access verification result expires, in ISO 8601 format.  # noqa: E501

        :return: The expiry_time of this PamTaskDetail.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time: datetime):
        """Sets the expiry_time of this PamTaskDetail.

        The time at which the PAM task access verification result expires, in ISO 8601 format.  # noqa: E501

        :param expiry_time: The expiry_time of this PamTaskDetail.
        :type expiry_time: datetime
        """
        if expiry_time is None:
            raise ValueError("Invalid value for `expiry_time`, must not be `None`")  # noqa: E501

        self._expiry_time = expiry_time
